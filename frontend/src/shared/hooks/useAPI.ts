import { useState, useEffect } from 'react'
import { apiClient } from '@/shared/api/client'
import type { Level, Achievement, UserStats, Attempt } from '@/types/api'

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
export function useLevels() {
  const [levels, setLevels] = useState<Level[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchLevels = async () => {
      try {
        setLoading(true)
        const [levelsData, attemptsData] = await Promise.all([
          apiClient.getLevels(),
          apiClient.getUserAttempts().catch(() => []) // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        ])
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ø—ã—Ç–æ–∫ –ø–æ —É—Ä–æ–≤–Ω—è–º
        const attemptsByLevel = new Map<number, Attempt[]>()
        attemptsData.forEach((attempt: Attempt) => {
          // –ë—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç LevelID, –∞ –Ω–µ level_id
          const levelId = attempt.level_id || attempt.LevelID
          if (levelId && !attemptsByLevel.has(levelId)) {
            attemptsByLevel.set(levelId, [])
          }
          if (levelId) {
            attemptsByLevel.get(levelId)!.push(attempt)
          }
        })
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –±—ç–∫–µ–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const formattedLevels = levelsData.map((level, index) => {
          const levelAttempts = attemptsByLevel.get(level.id) || []
          const completedAttempts = levelAttempts.filter((a: Attempt) => 
            a.status === 'completed' || a.Status === 'completed'
          )
          const isCompleted = completedAttempts.length > 0
          
          // –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
          let progress = 0
          
          if (isCompleted) {
            progress = 100
          }
          
          return {
            ...level,
            icon: getLevelIcon(level.topic),
            isCompleted,
            progress,
          }
        })
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        // –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω
        const finalLevels = formattedLevels.map((level, index) => {
          const isLocked = index > 0 && !formattedLevels[index - 1]?.isCompleted
          return {
            ...level,
            isLocked,
          }
        })
        
        setLevels(finalLevels)
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch levels')
      } finally {
        setLoading(false)
      }
    }

    fetchLevels()
  }, [])

  return { levels, loading, error }
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export function useAchievements() {
  const [achievements, setAchievements] = useState<Achievement[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchAchievements = async () => {
      try {
        setLoading(true)
        const [allAchievements, userAchievements] = await Promise.all([
          apiClient.getAchievements(),
          apiClient.getUserAchievements()
        ])
        
        // –û—Ç–º–µ—á–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const userAchievementIds = new Set(userAchievements.map(a => a.id))
        const formattedAchievements = allAchievements.map(achievement => ({
          ...achievement,
          unlocked: userAchievementIds.has(achievement.id)
        }))
        
        setAchievements(formattedAchievements)
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch achievements')
      } finally {
        setLoading(false)
      }
    }

    fetchAchievements()
  }, [])

  return { achievements, loading, error }
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function useUserStats() {
  const [stats, setStats] = useState<UserStats | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchStats = async () => {
      try {
        setLoading(true)
        const data = await apiClient.getUserStats()
        setStats(data)
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch user stats')
      } finally {
        setLoading(false)
      }
    }

    fetchStats()
  }, [])

  return { stats, loading, error }
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–ª–º–∞–∑–æ–≤
export function useDiamondsBalance() {
  const [balance, setBalance] = useState<number>(0)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchBalance = async () => {
      try {
        setLoading(true)
        const data = await apiClient.getDiamondsBalance()
        setBalance(data.balance)
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch balance')
      } finally {
        setLoading(false)
      }
    }

    fetchBalance()
  }, [])

  return { balance, loading, error }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —É—Ä–æ–≤–Ω—è
function getLevelIcon(topic: string): string {
  const iconMap: Record<string, string> = {
    'basics': 'üåü',
    'greetings': 'üëã',
    'family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
    'food': 'üçï',
    'numbers': 'üî¢',
    'colors': 'üé®',
    'animals': 'üê∂',
    'travel': '‚úàÔ∏è',
    'work': 'üíº',
    'hobbies': 'üéÆ',
  }
  
  return iconMap[topic.toLowerCase()] || 'üìö'
}
